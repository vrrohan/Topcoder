package PracticeArena.Easy;

public class SRM655BichromeBoard {

	public static String ableToDraw(String[] board) {
		String isBichromeBoardPossible = "Possible";

		if (board.length >= 1) {
			for (int i = 0; i < board.length; i++) {
				String rowNum = board[i];
				int firstIndexOfW = rowNum.indexOf("W");
				int firstIndexOfB = rowNum.indexOf("B");
				// when white color is at even position
				if (firstIndexOfW >= 0 & firstIndexOfW % 2 == 0) {
					// check if any even position contains Black
					for (int indexofWhite = 0; indexofWhite < rowNum.length(); indexofWhite = indexofWhite + 2) {
						if (rowNum.charAt(indexofWhite) == 'B') {
							isBichromeBoardPossible = "Impossible";
							break;
						}
					}
					// check if any odd position contains White
					for (int indexofBlack = 1; indexofBlack < rowNum.length(); indexofBlack = indexofBlack + 2) {
						if (rowNum.charAt(indexofBlack) == 'W') {
							isBichromeBoardPossible = "Impossible";
							break;
						}
					}
				} // if ends...

				// when white color is at odd position
				else if (firstIndexOfW >= 0 & firstIndexOfW % 2 == 1) {
					// check if any odd position contains black
					for (int indexofWhite = 1; indexofWhite < rowNum.length(); indexofWhite = indexofWhite + 2) {
						if (rowNum.charAt(indexofWhite) == 'B') {
							isBichromeBoardPossible = "Impossible";
							break;
						}
					}
					// check if any even position contains white
					for (int indexofBlack = 0; indexofBlack < rowNum.length(); indexofBlack = indexofBlack + 2) {
						if (rowNum.charAt(indexofBlack) == 'W') {
							isBichromeBoardPossible = "Impossible";
							break;
						}
					}
				} // else if ends...

				// when black color is at even position
				if (firstIndexOfB >= 0 & firstIndexOfB % 2 == 0) {
					// check if any even contains white color
					for (int indexofBlack = 0; indexofBlack < rowNum.length(); indexofBlack = indexofBlack + 2) {
						if (rowNum.charAt(indexofBlack) == 'W') {
							isBichromeBoardPossible = "Impossible";
							break;
						}
					}
					// check if any odd contains Black color
					for (int indexofWhite = 1; indexofWhite < rowNum.length(); indexofWhite = indexofWhite + 2) {
						if (rowNum.charAt(indexofWhite) == 'B') {
							isBichromeBoardPossible = "Impossible";
							break;
						}
					}
				} // if ends...

				// when black color is at odd position
				else if (firstIndexOfB >= 0 & firstIndexOfB % 2 == 1) {
					// check if any odd contains white color
					for (int indexofBlack = 1; indexofBlack < rowNum.length(); indexofBlack = indexofBlack + 2) {
						if (rowNum.charAt(indexofBlack) == 'W') {
							isBichromeBoardPossible = "Impossible";
							break;
						}
					}
					// check if any even contains black color
					for (int indexofWhite = 0; indexofWhite < rowNum.length(); indexofWhite = indexofWhite + 2) {
						if (rowNum.charAt(indexofWhite) == 'B') {
							isBichromeBoardPossible = "Impossible";
							break;
						}
					}
				} // else if ends...

			}
		}
		return isBichromeBoardPossible;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String[] board = { "W???", "??B?", "W???", "?B?W" };
		String[] board2 = { "W???", "??B?", "W???", "???W" };
		String[] board3 = { "W??W" };
		String[] board4 = { "W?W", "??B", "???" };
		String[] board5 = { "B", "B" };
		String[] board6 = { "B?B???BW?WBW", "??WBWB?BWB??", "BW?W?WB??W?W", "WBWBWB??WB?B", "BWB???B?????",
				"???B?B?B?B?B", "?W?W?WB?B???", "??WBW?W?WBW?", "?W?WBWB?B???", "?B??WB?BWB??", "BW????B?B?BW",
				"WBW???W?W???", "??BWB?BWBW?W", "?BW?WB??W?W?", "?????W??BW??", "WB?BW?W?W???", "??B??WB???B?",
				"?B??WBW?????", "?W?????W???W", "???B?B?BW?W?", "B?BW???W?W?W", "?????BW?WB??", "?W?W?W??B???",
				"?B?BWBW?W???", "?WB???BWBW??", "WBW?W??B??WB", "??BWB?BW?W?W", "WBWB?B?BW?WB", "?WB???????BW",
				"??WB?B?BWB??", "BW?W?W???WB?", "WBW????BWBWB" };
		String[] board7 = { "BW?WBWBWBWBWBWBWBWBWBWBWBWBWBWBWBW", "??WB?BW??BWBWBWBWBWBWBWBWBWBB?WWWB",
				"BWBWBWBWBWBWBWBWBWBWBWB?BBBWBWBWBW", "WBWB?B?BWBWBWBW?WBWBWBWBWBWBWBWBWB",
				"BWBW?WBWBWBWBWBWBWBWBWBWBWBWBWBWBW", "WBWBWW?BWBWB?BWB?BWB?BWBWBWBWBBBW?",
				"BBBWBWBWWWBWBWBWBWBWBWBWBWBWBWBWBW", "WBWBWBWWWBWBWBWBWBW?WBWBWBBBWBWBWB",
				"BWBWB?BW?WBWBWBWBWBWBWBWBWBWBWBWB?", "WBWBWB?BWBWB?BWBWB?B?BWBWBWBWBWBWB",
				"BWBWBWBWBWBWBWB?BWBWBWBWBWBWBWBWBW", "WBWWWBWBWBWB?BWBBBWBWBWBWBWBWBWBWB",
				"BWBWBWBWBWBWBW?WBW?WBWBW?WBWWWB??W", "WB?B?WWBWBWBWBWBWBWBWBWBWBWBWBWBWB",
				"BWBWBWBWBWBWB?BWBWBWBWBW?WBWBWBWBW", "WBWBBBWB?BWBWBWBBBWBWBBBWWW?WBWBWB",
				"BWBWBWWWWWBWBWBWBWBWBWBWBWBWBWBWBW", "WBWB?WWBWBWB?BWWWBWBWBWBWBWBBBWBWB",
				"BWBWB?BWBWBWBWBWBWBWBW?WBB??BWBWBW", "WBWBWB?BW?WBWBWBW?WBWBWBWBWBW?BBW?",
				"BWBW?WBBBWB?BWBWBWBWBWBWBWBW?W??BW", "WBWBWBWBWBW?WBWBWBWBWBWBWB?BWBWBWB",
				"BWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBW", "WBWBWBWBWBWBWBWBBB?BW?WBWBWBWBBBWB",
				"BWBW?W?WBWBWBWBWBWBBBWBWBWBWBWBWBW", "WBWBWBWBWBW?WBW?WBWBWBBBW?WBW?WBWB",
				"B?BWBW?WBBBWBWBWBWBWBWBW?WBWWWBWBW", "WBWBWBWBW?WB?BWBWBWBWBBBWBWB??WBWB",
				"BWBW??BWBWBWBWBWB?WWBWBWBWBWBWBWBW", "WBWBBBWBWBWBWBWB?BWBWBWBWB?BWBWBWB",
				"BWBWBWBWBWBWBWB?BWBWBWBWBWBWBWBWBB" };
		String[] board8 = { "?B????W????B?????BW?WB???BWBWB?B?B?????", "?W?W??????B??W?WB??W??BW?W?W???W??BWB??",
				"???B???B??W?W???????W?W?W?W?WB????WBW?W", "?WBWBW???WBW???W?W?WBW??B?B??W?WB??WB??",
				"?B?B?????B???B???????B????W??BW???W????", "?WB?BW??BW????B???????BW?W?W?WB????W??B",
				"WB?????B?BWB?BW??B?B??????W???W?W?W??B?", "B?????BWBW?WB????WBW?W??BW?W???WBW??B?B",
				"?BW?WBWBW????????BWB?B?BW?WBW??BWBW?WB?", "?????W??B????????W?W???W???????W?W????B",
				"?B?B??WBWBW???W??????????B??W??BW??B??W", "B?BWBWB?????B?BW?W???W??BW?W??B??WBWB?B",
				"W??B??W?WB?B?B??????????W???WBW?WB??W?W", "B?????????B?B???BW??B??WBWBW?WBW???W?W?",
				"?B?????B??????????W?WB???????B????WB?B?", "B??????W??B?BWB?B??WB???B?BW???W??BWB??",
				"??W?????WB?????BW?W????????B??W??B??WB?", "?W?W?W?WBWB???????BW??BWB??W?W?WBWB????",
				"WB??????W??B???B??W?W???W??B??W??????B?", "B??W???W?W??B???B??????WBWB????W????BWB",
				"WB?B?BWB????WBWB???BWBW?WBWB??WB????WBW", "B??WBWB??W??B???B??W??BW?WBW??B??WBW??B",
				"???B?BW??BW???W???W???W???W??B??W?WB?B?", "??????B?BWB?BWB???B???BW?W?????????WB??",
				"W?W??BW???WBWBW?WB?B?B???BW?WB?B?????BW", "B???BWBWBW???W??B??W?WB?B???B?BWBW??B??",
				"????W??????B?BWB???B?BWBW?????WBW?W???W", "BW??B????W???WBWB??W?W???????WB???B???B",
				"?B???B???BW?W?WB??W?WBW?W???WB??W?W????", "B?BW?WB??????W????BW?W?WB??????W????B?B",
				"?BWBW?????W???WB??WB??W?WB?B?B??????W??", "?W??BW??B?B?BW??B?BW?W??BW??B????WBW??B",
				"W?W?WB?B??W?W??BW????B??W?W????????B???", "??B???BW?WB??WB????WB?BW?WB?B?B?BW??B??",
				"WB??W?WB??WB??W?W?????W???W???W???????W", "BW????B????W?W???W???W??BW??B????W??B??",
				"??WB??W??BWB?B??WB??W??BW??B????WB?BW?W", "????BW?WB?B??????W?????WBW?W??B?????B??",
				"???B?B??W?W?W?W??B?????B?????BW?WBW???W", "?W?W??BW?WBW???W?W???????WB?B??W??B?BW?",
				"?BWB??W??BWBWB????????????W????????B???", "??B??W?W?????W?W??????????B????W?W?W?W?",
				"??W?W??BWB??W?W???WBW????B?BW?????WBW??", "?WB??????W??BWB?B??W?WB?B????W?WBWB??W?",
				"?B??????W??B?B???B????WBW?W???W?W?W???W", "?????W????B???B???BW???WBW?WB?BW?WBWB??",
				"W?WB?BW?W?W??BWB?????B??W????????BW??B?", "BW?W?????W?W?W??BW???????????W??B?BWB??",
				"?BW?WB????W?WB?B?BW????BW????B?B??W??B?", "?W?WB?B?B??WB????WB?B?????????B?B??W?W?" };
		System.out.println(ableToDraw(board5));
	}

}
